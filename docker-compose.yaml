services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    networks:
      - main_network

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - main_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 3

  backend:
    build: ./backend
    command: >
      bash -c "python manage.py migrate &&
               python manage.py collectstatic --noinput &&
               gunicorn back.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    networks:
      - main_network
    depends_on:
      - db
      - redis

  celery-worker:
    build: ./backend
    command: celery -A back worker --loglevel=info
    env_file:
      - ./backend/.env
    networks:
      - main_network
    depends_on:
      - backend
      - redis



  scooter:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - SITE=scooter
    image: nuxt-app-scooter
    environment:
      - SITE=scooter
      - PORT=3000
      - API_URL=http://backend:8000/api
    networks:
      - main_network
    depends_on:
      - backend

  magnet:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - SITE=magnet
    image: nuxt-app-magnet
    environment:
      - SITE=magnet
      - PORT=3001
      - API_URL=http://backend:8000/api
    networks:
      - main_network
    depends_on:
      - backend

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./backend/staticfiles:/app/staticfiles
    ports:
      - "3000:3000"
      - "3001:3001"
      - "8000:8000"
    networks:
      - main_network
    depends_on:
      - backend
      - scooter
      - magnet

volumes:
  postgres_data:
  redis_data:

networks:
  main_network:
    driver: bridge